/**
 * Document: MaxCompiler tutorial (maxcompiler-tutorial.pdf)
 * Chapter: 4      Example: 2      Name: Simple
 * MaxFile name: Simple
 * Summary:
 * 	 Takes a stream and for each value x calculates x^2 + x.
 */
#include <time.h>
#include <sys/time.h>
#include <sys/times.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <MaxSLiCInterface.h>
#include "Maxfiles.h"
/*
 * This function is used to get CLOCK_REALTIME to make benchmarks.
 *
*/
double elapsedTime(void){
    struct timespec {
        time_t   tv_sec;        /* seconds */
        long     tv_nsec;       /* nanoseconds */
    }time;
    clockid_t clk_id = CLOCK_REALTIME;

    int flag;
    double timing;

    flag = clock_gettime(clk_id, &time);
    if (flag == 0)
        timing = (double)time.tv_sec + ((double)1.0e-9)*(double)time.tv_nsec;
    else
        timing = -31.0;  // If timer failed, return non-valid time

    return (timing);
}

int check(float dfenrm1, float cpunrm1)
{
    int status = 0;
    if(dfenrm1 != cpunrm1) {
        status = 1;
        printf("dfenorm1 = %f\tcpunrm1 = %f\n",dfenrm1,cpunrm1);
    }
    return status;
}

float SimpleCPU(int size, float *xIn)
{
    float cpunrm1 = 0;
    for (int i = 0 ; i < size ; i++) {
        cpunrm1 = cpunrm1 + xIn[i]*xIn[i];
    }
    return cpunrm1;
}

float *xIn;
float *xOut;
float *xExpected;
double timeStart,timeEnd,timeElapsed;

int main()
{
    int i,j;
    float cpunrm1 = 0;
    float dfenrm1 = 0;
    int size = 128;

    printf("\n\n\n\n\n\n\n**********************************************************************\n");
    for(j = 1; j <= 10; j++) {
//  allocating memory to vector xIn
        size = size * j * 2;
        xIn = calloc(size, sizeof(float));
        if (xIn == NULL) {
            printf("Memory allocation failed for array xIn\n");
            printf("*******\nExiting...\n*******");
            exit(13);
        }
//  allocating memory to vector xOut
        xOut = calloc(size, sizeof(float));
        if (xOut == NULL) {
            printf("Memory allocation failed for array xOut\n");
            printf("*******\nExiting...\n*******");
            exit(13);
        }
//  allocating memory to vector xExpected
        xExpected = calloc(size, sizeof(float));
        if (xExpected == NULL) {
            printf("Memory allocation failed for array xExpected\n");
            printf("*******\nExiting...\n*******");
            exit(13);
        }

//  populating the vector
        for (i = 0; i < size; i++) {
            xIn[i] = (float) rand();
            xOut[i] = 0.0;
        }

        timeStart = elapsedTime();
        cpunrm1 = SimpleCPU(size, xIn);
        timeEnd = elapsedTime();
        timeElapsed = timeEnd - timeStart;
        printf("Time start = %lf\n", timeStart);
        printf("Time end   = %lf\n", timeEnd);
        printf("Total Time for CPU = %lf\n", timeElapsed);

        timeStart = elapsedTime();
        Simple(size, xIn, xOut);
        timeEnd = elapsedTime();
        printf("DFE Time start = %lf\n", timeStart);
        printf("DFE Time end   = %lf\n", timeEnd);
        timeElapsed = timeEnd - timeStart;
        printf("Time for DFE = %lf\n", timeElapsed);

        timeStart = elapsedTime();
        for (i = 0; i < size; i++) {
            dfenrm1 = dfenrm1 + xOut[i];
        }
        timeEnd = elapsedTime();
        printf("Time start = %lf\n", timeStart);
        printf("Time end   = %lf\n", timeEnd);
        printf("Time for local addition = %lf\n", timeEnd - timeStart);
        printf("Total time for DFE = %lf\n", timeElapsed + timeEnd - timeStart);

        printf("\n**********************************************************************\n");
        printf("DFE # %d.\n",j);
        int status = check(dfenrm1, cpunrm1);
        if (status)
            printf("Test failed.\n");
        else
            printf("Test passed OK!\n");
        printf("\n**********************************************************************\n\n\n\n\n\n\n");

        free(xIn);
        free(xOut);
        free(xExpected);
    }
    return 0;
}
